---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jenkins-admin
rules:
  - apiGroups: [""]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins-admin
  namespace: devops-tools
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins-admin
subjects:
- kind: ServiceAccount
  name: jenkins-admin
  namespace: devops-tools
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-service
  namespace: devops-tools
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/path:   /
      prometheus.io/port:   '8080'
spec:
  selector:
    app: jenkins-server
  type: NodePort
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 32000
  # externalIPs:
  #   - 172.17.0.1
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: jenkins-pv-volume
#   labels:
#     type: local
# spec:
#   storageClassName: local-storage
#   claimRef:
#     name: jenkins-pv-claim
#     namespace: devops-tools
#   capacity:
#     storage: 10Gi
#   accessModes:
#     - ReadWriteOnce
#   local:
#     path: /data/jenkins-volume
#   nodeAffinity:
#     required:
#       nodeSelectorTerms:
#       - matchExpressions:
#         - key: kubernetes.io/hostname
#           operator: In
#           values:
#           - kind-control-plane
# ---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pv-claim
  namespace: devops-tools
spec:
  storageClassName: local-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: devops-tools
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins-server
  template:
    metadata:
      labels:
        app: jenkins-server
    spec:
      securityContext:
            fsGroup: 1000
            runAsUser: 1000
      serviceAccountName: jenkins-admin
      containers:
        - name: jenkins
          image: ghcr.io/dos09-onl/jenkins-master-w-docker:latest
          resources:
            limits:
              memory: "2Gi"
              cpu: "2000m"
            requests:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - name: httpport
              containerPort: 8080
            - name: jnlpport
              containerPort: 50000
          # resources: {}
          # env:
          # - name: JENKINS_OPTS
          #   value: --prefix=/jenkins
          livenessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: jenkins-data
              mountPath: /var/jenkins_home
            - name: dockersock
              mountPath: /var/run/docker.sock
      imagePullSecrets:
        - name: dockerconfigjson
      volumes:
        - name: jenkins-data
          persistentVolumeClaim:
            claimName: jenkins-pv-claim
        - name: dockersock
          hostPath:
            # accessMode: readOnly 
            # directory location on host
            path: /var/run/docker.sock
            # this field is optional
            type: Socket
            # mountPath: /var/Jenkinsfile
---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   annotations:
#     nginx.ingress.kubernetes.io/app-root: /
#     nginx.ingress.kubernetes.io/rewrite-target: /$2
#   name: jenkins
#   namespace: devops-tools
#   labels:
#     app: jenkins-server
# spec:
#   rules:
#   - http:
#       paths:
#       - pathType: Exact
#         path: /jenkins
#         backend:
#           service:
#             name: jenkins-service
#             port:
#               number: 8080
# ---